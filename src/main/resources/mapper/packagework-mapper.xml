<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.PackageworkMapper">
    <select id="getPackageworkList" resultMap="packageworkMap.packageworkResultMap" resultType="list">
        <![CDATA[
        	select tmp.builderid,tmp.buildername,tmp.buildingsiteid,tmp.buildingsitename,tmp.packageworkendyear,tmp.packageworkendmonth,tmp.packageworkmoney,tmp.otherinfo from (select ROW_NUMBER() OVER() AS R,b.id as builderid,b.name as buildername,b.shortname as buildershortname, bs.id as buildingsiteid, bs.name as buildingsitename, bs.shortname as buildingsiteshortname, p.packageworkendyear, p.packageworkendmonth, p.packageworkmoney, p.otherinfo from packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where 1=1 and b.showtype = '1' and bs.showtype = '1' order by ${orderValue}) as tmp where R > #{startIndex} and R <= #{endIndex} and (tmp.buildername like #{filterValue} or tmp.buildershortname like #{filterValue}) and tmp.buildingsiteid = #{buildingsiteid}
        ]]>
    </select>
    
    <insert id="addPackagework" parameterType="packagework">
        insert into packagework(builderid, buildingsiteid, projectid, packageworkendyear, packageworkendmonth, packageworkmoney, otherinfo, createtime, updatetime)
        values(#{builderid}, #{buildingsiteid}, #{projectid}, #{packageworkendyear}, #{packageworkendmonth}, #{packageworkmoney}, #{otherinfo}, varchar(current_timestamp), varchar(current_timestamp))
    </insert>
    
    <update id="editPackagework" parameterType="packagework">
        update packagework set
        packageworkendyear = #{packageworkendyear},
        packageworkendmonth = #{packageworkendmonth},
        packageworkmoney = #{packageworkmoney},
        otherinfo = #{otherinfo},
        updatetime = varchar(current_timestamp)  
        where builderid = #{builderid} and buildingsiteid = #{buildingsiteid} and projectid = #{projectid}
    </update>
    
    <delete id="removePackageworks" parameterType="java.util.List">
        delete from packagework where builderid in
          <foreach collection="idList" index="index" item="tag" open="(" separator="," close=")">
		    #{tag}
		  </foreach>
		 and buildingsiteid = #{buildingsiteid} and projectid = #{projectid}
    </delete>
    
    <select id="getTotalCount" resultType="int">
        <![CDATA[
        	select count(tmp.builderid) from (select ROW_NUMBER() OVER() AS R,b.id as builderid,b.name as buildername,b.shortname as buildershortname, bs.id as buildingsiteid, bs.name as buildingsitename, bs.shortname as buildingsiteshortname, p.packageworkmoney, p.otherinfo from packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where 1=1 and b.showtype = '1' and bs.showtype = '1') as tmp where (tmp.buildername like #{filterValue} or tmp.buildershortname like #{filterValue}) and tmp.buildingsiteid = #{buildingsiteid}
        ]]>
    </select>
    
    <select id="getPackageworkByBuilderidAndBuildingsiteid" resultType="packagework">
        <![CDATA[
        	SELECT b.id as builderid, b.name as buildername, bs.id as buildingsiteid, bs.name as buildingsitename, p.packageworkendyear, p.packageworkendmonth, p.packageworkmoney, p.otherinfo, p.createtime, p.updatetime FROM packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where builderid = #{builderid} and buildingsiteid = #{buildingsiteid}
        ]]>
    </select>
    
     <select id="getPackageworkByPackageworkDetail" resultType="packagework">
        <![CDATA[
        	SELECT builderid, buildingsiteid, otherinfo, packageworkendyear, packageworkendmonth, packageworkmoney, createtime, updatetime FROM packagework where builderid = #{builderid} and buildingsiteid = #{buildingsiteid}
        ]]>
    </select>
    
    <select id="getPackageworkListForAll" resultMap="packageworkMap.packageworkResultMap" resultType="list">
        <![CDATA[
        	select distinct tmp.builderid, tmp.buildername from (select ROW_NUMBER() OVER() AS R,b.id as builderid,b.name as buildername,b.shortname as buildershortname from packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where 1=1 and b.showtype = '1' and bs.showtype = '1' and p.projectid = #{projectid}) as tmp where R > #{startIndex} and R <= #{endIndex} and (tmp.buildername like #{filterValue} or tmp.buildershortname like #{filterValue}) order by ${orderValue}
        ]]>
    </select>
    
    <select id="getPackageworkDetailListForAll" resultMap="packageworkdetailMap.packageworkdetailResultMap" resultType="list">
        <![CDATA[
        	select bs.id as buildingsiteid, bs.name as buildingsitename, sum(double(p.packageworkmoney)) as packageworkmoney from packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where 1=1 and b.showtype = '1' and bs.showtype = '1' and p.builderid = #{builderid} group by bs.id, bs.name
        ]]>
    </select>
    
    <select id="getTotalCountForAll" resultType="int">
        <![CDATA[
        	select count(x.builderid) from (select distinct tmp.builderid, tmp.buildername from (select ROW_NUMBER() OVER() AS R,b.id as builderid,b.name as buildername,b.shortname as buildershortname from packagework p left join builder b on p.builderid = b.id left join buildingsite bs on p.buildingsiteid = bs.id where 1=1 and b.showtype = '1' and bs.showtype = '1' and p.projectid = #{projectid}) as tmp where (tmp.buildername like #{filterValue} or tmp.buildershortname like #{filterValue})) as x
        ]]>
    </select>
</mapper>